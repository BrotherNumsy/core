#!/bin/bash

set -e
# Check that we are in the root of the opencrowbar checkout tree
if [[ $0 = /* ]]; then
    OCBDIR="$0"
elif [[ $0 = .*  || $0 = */* ]]; then
    OCBDIR="$(readlink -f "$PWD/$0")"
else
    echo "Cannot figure out where we are!"
    exit 1
fi

export OCBDIR="${OCBDIR%/core/tools/kvm-admin}"

admin_server_loc="$HOME/.cache/opencrowbar/tftpboot/centos-6.5"

if [[ ! -d $admin_server_loc/install ]]; then
    echo "Cannot find extracted Centos 6.5 install tree!"
    echo "kvm-admin requires that docker-admin have already created it!"
    exit 1
fi

if [[ ! -d $admin_server_loc/ocb-packages/repodata ]]; then
    if [[ ! -d $OCBDIR/build-tools/.git ]]; then
        echo "Cloning build-tools into $OCBDIR"
        (cd "$OCBDIR" && git clone https://github.com/opencrowbar/build-tools)
    fi
    echo "Creating OCB install RPM packages"
    "$OCBDIR/build-tools/bin/make-rpms.sh"
fi

. "$OCBDIR/core/tools/kvm_lib.sh"
TMPDIR=$(mktemp -d /tmp/ocb-kvm-admin-XXXXXX)

# Run a webserver pointing at our local repos
ruby -rwebrick -e "WEBrick::HTTPServer.new(Port: 8091, DocumentRoot: '$admin_server_loc').start" &>/dev/null &
webrick_pid="$!"

myclean() {
    set +e
    rm -rf "$TMPDIR"
    kill -9 $webrick_pid
    cleanup
    kill_ocb_bridge
}
trap 'myclean' 0 INT QUIT TERM

# Inject our kickstart into the PXE install ISO.
mkdir -p "$TMPDIR/initrd"
cat >"$TMPDIR/initrd/opencrowbar.ks" <<'EOF'
# Opencrowbar Admin Development Kickstart

install
url --url http://192.168.124.1:8091/install
key --skip
lang en_US.UTF-8
keyboard us
text
network --activate --bootproto=static --device=eth0 --ip=192.168.124.10 --netmask=255.255.252.0 --nodns --nodefroute
# crowbar
rootpw --iscrypted $1$H6F/NLec$Fps2Ut0zY4MjJtsa1O2yk0
firewall --disabled
authconfig --enableshadow --enablemd5
selinux --disabled
timezone --utc UTC
bootloader --location=mbr --driveorder=sda
zerombr
ignoredisk --only-use=sda
clearpart --all --drives=sda
part /boot --fstype ext4 --size=100 --ondisk=sda
part pv.6 --size=1 --grow --ondisk=sda
volgroup ocb_admin --pesize=32768 pv.6
logvol / --fstype ext4 --name=root --vgname=ocb_admin --size=1 --grow
logvol swap --size=4096 --name=swap --vgname=ocb_admin
reboot

%packages --nobase
@core
vim-enhanced
keyutils
trousers
fipscheck
device-mapper-multipath
emacs-nox
openssh

%post
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
exec > /root/post-install.log 2>&1
set -x
authkey_re='crowbar\.authkey=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $authkey_re ]]; then
    mkdir -p "/root/.ssh"
    printf '%b\n'  "${BASH_REMATCH[1]}" >> "/root/.ssh/authorized_keys"
fi
mkdir -p /etc/profile.d
for proxy in http_proxy https_proxy no_proxy; do
    match_re="crowbar\.$proxy=([^ ]+)"
    [[ $(cat /proc/cmdline) =~ $match_re ]] || continue
    printf '%s="%b"\n' "$proxy" "${BASH_REMATCH[1]}" >> /etc/profile.d/10-proxies.sh
    printf '%s=%b\n' "$proxy" "${BASH_REMATCH[1]}" >> /etc/environment
done
[[ -f /etc/profile.d/10-proxies.sh ]] && chmod 755 /etc/profile.d/10-proxies.sh

cat >/etc/yum.repos.d/local-ocb.repo <<EOR
[ocb]
name=Local Opencrowbar
baseurl=http://192.168.124.1:8091/ocb-packages
gpgcheck=0
EOR

EOF
cp "$admin_server_loc/install/images/pxeboot/initrd.img" "$TMPDIR"
chmod 644 "$TMPDIR/initrd.img" 
(cd "$TMPDIR/initrd"; find . -depth  |cpio --create --format=newc |gzip -9 >>"$TMPDIR/initrd.img")

install_params=("ksdevice=eth0"
    "ks=file:/opencrowbar.ks"
    "ip=192.168.124.10"
    "netmask=255.255.252.0 nofb"
    "text")
install_params+=("crowbar.authkey=$(sed 's/ /\\040/g' <"$HOME/.ssh/id_rsa.pub")")
. "$OCBDIR/core/tools/proxy_lib.sh"
mangle_proxies "${OCB_BRIDGE_IP%/*}"
for proxy in "${!mangled_proxies[@]}"; do
    install_params+=("crowbar.$proxy=${mangled_proxies[$proxy]}")
done

make_ocb_bridge
qemu-img create -f raw "$VM_DIR/$VMID.disk" 30G &>/dev/null
makenics

# Kick off the installer
run_kvm -kernel "$admin_server_loc/install/images/pxeboot/vmlinuz" \
    -initrd "$TMPDIR/initrd.img" \
    -append "${install_params[*]}"

# Once we get here, the OS should be installed.
while [[ ! -f $VM_DIR/$VMID.killed ]]; do
    update_vm_status "Booting node to disk"
    if run_kvm -bootc; then
        kill_vm exited
    else
        update_vm_status "Node failed to deploy."
        kill_vm killed
    fi
done
