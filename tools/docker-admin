#!/bin/bash
# Run opencrowbar in a docker container.
# $1 = OS to run in
# $@ = Command to run, if nothing then /bin/bash -i

# If we are not running inside of Docker, put ourselves in a container.
if [[ ! $container = lxc ]]; then
    declare -A image_map
    #image_map["ubuntu"]="ubuntu:precise"
    image_map["ubuntu"]="opencrowbar/ubuntu:12.04-4"
    #image_map["centos"]="centos:6.4"
    image_map["centos"]="opencrowbar/centos:6.5-3"
    image_map["opensuse"]="mmckeen/opensuse-13-1:latest"
    image_map["fedora"]="fedora:20"
    image_map["debian"]="debian:jessie"
    image="${image_map[$1]}"
    tftproot="/tftpboot"
    if [[ ! $image ]]; then
        echo "$1 is not an image we can run on!"
        printf "Try one of: "
        printf "%s " "${!image_map[@]}"
        echo
        exit 1
    fi
    shift
    if ! which docker &>/dev/null; then
        echo "Please install Docker!"
        exit 1
    fi

    # Check to see if we have a Sledgehammer image handy.
    if [[ ! -f $HOME/.cache/opencrowbar/tftpboot/discovery/initrd0.img ]]; then
        echo "You need to have a Sledgehammer image created before running a Docker admin node!"
        echo "Create the Sledgehammer image by running:"
        echo "$(readlink -f "${0%/*}/build_sledgehammer.sh")"
        exit 1
    fi

    mkdir -p "$HOME/.cache/opencrowbar/tftpboot"
    
    docker_args=(-t -i -w /opt/opencrowbar/core -v "$PWD:/opt/opencrowbar/core")
    docker_args+=(-v "$HOME/.cache/opencrowbar/tftpboot:$tftproot")
    docker_args+=(-e "OUTER_UID=$(id -u)")
    docker_args+=(-e "OUTER_GID=$(id -g)")
    [[ -f $HOME/.ssh/id_rsa.pub ]] && docker_args+=(-e "SSH_PUBKEY=$(cat "$HOME/.ssh/id_rsa.pub")")
    docker_args+=(-p "3000:3000")
    bridge="docker0"
    bridge_re='-b=([^ ])'
    bridge_addr_re='inet ([0-9.]+)/'
    # If we told Docker to use a custom bridge, here is where it is at.
    [[ $(ps -C docker -o 'command=') =~ $bridge_re ]] && \
        bridge="${BASH_REMATCH[1]}"
    # Capture the IP of the bridge for later when we are hacking up
    # proxies.
    [[ $(ip -o -4 addr show dev $bridge) =~ $bridge_addr_re ]] && \
        bridge_ip="${BASH_REMATCH[1]}"
    # Make sure the container knows about our proxies, if applicable.
    if [[ $http_proxy ]]; then
        USE_PROXY=1
        raw_proxy="${http_proxy#*://}"
        raw_proxy="${raw_proxy%/}"
        proxy_re='^(.+):([0-9]+)$'
        hostsplit_re='(.*)@(.*)'
        userpass_re='(.*):(.*)'
        if [[ $raw_proxy =~ $proxy_re ]]; then
            raw_proxy="${BASH_REMATCH[1]}"
            proxy_port="${BASH_REMATCH[2]}"
        fi
        if [[ $raw_proxy =~ $hostsplit_re ]]; then
            raw_proxy="${BASH_REMATCH[2]}"
            proxy_user="${BASH_REMATCH[1]}"
            if [[ ${BASH_REMATCH[1]} =~ $userpass_re ]]; then
                proxy_password="${BASH_REMATCH[2]}"
                proxy_user="${BASH_REMATCH[1]}"
            fi
        fi
        # If we are running a local proxy, have Docker use it.
        # This will fail badly if the proxy does not accept
        # requests for addresses in Docker's range.'
        case $raw_proxy in
            127.0.0.1|[::]|localhost) raw_proxy="$bridge_ip";;
        esac
        docker_proxy="http://"
        if [[ $proxy_user ]]; then
            if [[ $proxy_password ]]; then
                docker_proxy+="$proxy_user:$proxy_password@"
            else
                docker_proxy+="$proxy_user@"
            fi
        fi
        docker_proxy+="$raw_proxy"
        [[ $proxy_port ]] && docker_proxy+=":${proxy_port}"
        docker_args+=(-e "http_proxy=$docker_proxy")
        [[ $https_proxy ]] && docker_args+=(-e "https_proxy=$docker_proxy")
        [[ $no_proxy ]] && docker_args+=(-e "no_proxy=$no_proxy")
    fi
    # Run whatever we specified to run inside a container.
    docker run "${docker_args[@]}" "$image" /opt/opencrowbar/core/tools/docker-admin "$@"
    exit $?
fi
export LANG=en_US.UTF-8
if grep -q crowbar /etc/passwd; then
    find /var /home  -user crowbar -exec chown "$OUTER_UID" '{}' ';'
    usermod -o -u "$OUTER_UID" crowbar
else
    useradd -o -U -u "$OUTER_UID" \
        -d /home/crowbar -m \
        -s /bin/bash \
        crowbar
fi
if grep -q crowbar /etc/group; then
    find /var /home -group crowbar -exec chown "$OUTER_UID:$OUTER_GID" '{}' ';'
    groupmod -o -g "$OUTER_GID" crowbar
    usermod -g "$OUTER_GID" crowbar
fi
mkdir -p /root/.ssh
printf "%s\n" "$SSH_PUBKEY" >> /root/.ssh/authorized_keys

[[ $1 ]] && "$@"
. /etc/profile
export PATH=$PATH:/opt/opencrowbar/core/bin
/bin/bash -i
rm -rf /tftpboot/nodes
