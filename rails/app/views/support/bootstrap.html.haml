- @deployment = Deployment.system
%h1= t '.title'

.column_40

  %h2= t '.admin_net'

  - if @net
    = link_to @net.name, networks_path(:id=>@net.id)
  - else 
    %table.data.box
      %thead
        %tr
          %th= t '.name'
          %th= t '.description'
          %th= t '.deployment'
          %th= t '.vlan'
          %th= t '.v6prefix'
          %th= t '.bridge'
          %th= t '.team'
          %th= t '.conduit'
          %th= t '.ranges'
          %th= ''
      %tbody
        = form_for :network, :'data-remote' => true, :url => networks_path(:version=>'v2'), :html => { :method=>:post, :'data-type' => 'json',  :class => "formtastic" } do |f|
          %tr
            %td
              = 'admin'
              = hidden_field_tag :name, 'admin', :size=>6
            %td= text_field_tag :description, "", :size=>20
            %td
              = link_to 'system', deployments_path(:id=>'system')
              = hidden_field_tag :deployment, 'system'
            %td= text_field_tag :vlan, "-1", :size=>4
            %td= text_field_tag :v6prefix, Network::V6AUTO, :size=>4
            %td= text_field_tag :bridge, "-1", :size=>4
            %td= text_field_tag :team_mode, "-1", :size=>4
            %td= text_field_tag :conduit, Network::DEFAULTCONDUIT, :size=>4
            %td
              = '192.168.124.0/24'
              = hidden_field_tag :ranges, '"ranges":[{"name": "admin","first": "192.168.124.10/22","last": "192.168.124.11/22"}, {"name": "host", "first": "192.168.124.81/22","last": "192.168.127.254/22"},{"name": "dhcp","first": "192.168.124.21/22","last": "192.168.124.80/22"}]'
            %td
              %input.button{:type => "submit", :value => t('add')}

  %h2= t '.admin_server'

  - unless @node
    - name = %x{hostname -f}.strip
    - name+=".opencrowbar.org" unless name =~ Node::FQDN_RE
    = form_for :node, :'data-remote' => true, :url => nodes_path(:version=>'v2'), :html => { :method=>:post, :'data-type' => 'json',  :class => "formtastic", :remote=>true } do |f|
      = hidden_field_tag :name, name
      = hidden_field_tag :admin, true
      = hidden_field_tag :alive, false
      = hidden_field_tag :bootenv, "local"
      %input.button{:type => "submit", :value => t('.create', :server=>name) }
  -else
    =link_to @node.name, node_path(@node.id)

  %h2= t '.bind_admin_server'

  - if @node
    - @node.node_roles.each do |nr|
      = link_to nr.role.name, node_roles_path(nr.id) if nr.role.noop?
    - aroles = @deployment.available_roles
    - if current_user and current_user.settings(:ui).noop_roles
      - aroles.keep_if {| r | r.noop? } 
    - if aroles.length > 0 
      = form_for :node_roles, :'data-remote' => true, :url => node_roles_path(:node_id=>@node.id, :deployment=>@deployment.id, :version=>'v2'), :html => { :method=>:post, :'data-type' => 'json',  :class => "formtastic" } do |f|
        = hidden_field_tag :deployment_id, @deployment.id
        = f.collection_select :role_id, aroles, :id, :name_i18n
        %input.button{:type => "submit", :name => "add", :method=>:post, :value => t('add')}

  %h2= t '.attribs'
  %table.data.box
    %thead
      %tr
        %th= t '.attrib'
        %th= t '.value'
        %th= ""
        - if current_user and current_user.settings(:ui).debug
          %th= t '.ui_renderer'
    %tbdoy
      - @attribs.each do |attrib|
        = render :partial => attrib[1].ui_renderer, :locals => {:obj=>attrib[0], :obj_type => 'role_id', :attrib=>attrib[1], :editable=>true }

  - if @node and !@node.alive?
    %h2= t '.start_server'

    = link_to t('.start'), node_path(@node.id, :version=>'v2', :alive=>true), :method=>:put, :class=>'button', :remote=>true, :onclick=>"location.reload();"

  %h2= t '.monitor'
  = link_to t('.anneal'), annealer_path()

:javascript

  $(document).ready(function() {  
    
    // return message if error creating admin server
    $('.network')
      .bind("ajax:error", function(evt, xhr, status, error){ 
        alert(JSON.parse(xhr.responseText)["message"]); 
        })
      .bind("ajax:success", function(data, status, xhr){ 
        location.reload();
        });

     // return message if error creating admin server
    $('.node')
      .bind("ajax:error", function(evt, xhr, status, error){ 
        alert(JSON.parse(xhr.responseText)["message"]); 
        })
      .bind("ajax:success", function(data, status, xhr){ 
        location.reload();
        });

     // return message if error creating admin server
    $('.node_roles')
      .bind("ajax:error", function(evt, xhr, status, error){ 
        alert(JSON.parse(xhr.responseText)["message"]); 
        })
      .bind("ajax:success", function(data, status, xhr){ 
        location.reload();
        });

  });